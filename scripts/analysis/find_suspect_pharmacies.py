#!/usr/bin/env python3
"""Identify potential chain or hospital pharmacies in an Excel report.

Heuristic: any normalized pharmacy name that appears more than N times across the
spreadsheet is flagged as suspicious, because true independents are rarely
repeated in many locations.

Usage:
    python scripts/find_suspect_pharmacies.py \
        --input-file independent_pharmacies_20250623_005348.xlsx \
        --threshold 5 \
        --output-file suspect_pharmacies.xlsx
"""

import argparse
import re
from pathlib import Path

import pandas as pd


def normalize_name(name: str) -> str:
    """Lower-case, remove punctuation / special chars, collapse spaces."""
    if not isinstance(name, str):
        return ""
    # Keep alphanumerics and spaces
    cleaned = re.sub(r"[^a-z0-9 ]", "", name.lower())
    # Collapse multiple spaces
    cleaned = re.sub(r"\s+", " ", cleaned).strip()
    return cleaned


def main():
    parser = argparse.ArgumentParser(
        description="Find suspect (likely chain / hospital) pharmacies by name frequency"
    )
    parser.add_argument("--input-file", required=True, help="Excel file generated by pharmacy_processor.py")
    parser.add_argument(
        "--threshold",
        type=int,
        default=5,
        help="Minimum occurrences of a normalized name to flag as suspect (default: 5)",
    )
    parser.add_argument(
        "--output-file",
        default="suspect_pharmacies.xlsx",
        help="Excel file to write the suspect list (default: suspect_pharmacies.xlsx)",
    )

    args = parser.parse_args()

    input_path = Path(args.input_file)
    if not input_path.exists():
        raise FileNotFoundError(f"Input file not found: {input_path}")

    df = pd.read_excel(input_path)
    if "Pharmacy Name" not in df.columns:
        raise ValueError("Expected column 'Pharmacy Name' not found in spreadsheet")

    # Normalise names and count
    df["norm_name"] = df["Pharmacy Name"].apply(normalize_name)
    counts = df["norm_name"].value_counts()

    # Select suspects
    suspect_names = counts[counts > args.threshold].index
    suspect_df = df[df["norm_name"].isin(suspect_names)].copy()
    suspect_df.insert(0, "Occurrences", suspect_df["norm_name"].map(counts))
    print(
        f"Found {len(suspect_names)} unique suspect names representing {len(suspect_df)} rows"
    )

    suspect_df.to_excel(args.output_file, index=False)
    print(f"Suspect list written to {args.output_file}")


if __name__ == "__main__":
    main()
