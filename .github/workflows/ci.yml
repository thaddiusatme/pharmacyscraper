name: CI Pipeline

on:
  push:
    # Run on all branches when pushing to .github/workflows/
    branches: [ main, master, develop, 'feature/*' ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/**'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'setup.*'
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Weekly dependency updates check (runs every Sunday)
    - cron: '0 0 * * 0'
  # Manual trigger configuration
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for running the workflow manually'
        required: false
        default: 'Manual trigger'
        type: string

# Set environment variables for all jobs
env:
  PYTHON_VERSION: '3.10'  # Default Python version
  POETRY_VERSION: '1.5.1'  # If using Poetry

# Cache configuration for pip and other tools
defaults:
  run:
    shell: bash

jobs:
  test:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e .[dev]

    - name: Run tests with pytest
      run: |
        mkdir -p test-results/${{ matrix.python-version }}
        python -m pytest tests/ -v \
          --cov=pharmacy_scraper \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=test-results/${{ matrix.python-version }}/results.xml

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results/${{ matrix.python-version }}/

    - name: Upload coverage report
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.xml
        fail_ci_if_error: false
        verbose: true

  lint-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run type checking with mypy
      run: |
        mypy src/ --install-types --non-interactive --show-error-codes
    
    - name: Run linters
      run: |
        flake8 src/ tests/ --count --show-source --statistics
        black --check --diff src/ tests/
        isort --check-only --diff src/ tests/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Bandit security scanner
      run: |
        python -m pip install bandit
        # Run bandit and ensure the output file is created
        bandit -r src/ -c pyproject.toml -f json -o bandit-results.json || echo "Bandit found issues"
        # Create an empty results file if it doesn't exist
        touch bandit-results.json
    
    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bandit-results.json
      continue-on-error: true

  dependency-updates:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'  # Only run on schedule
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
    
    - name: Check for outdated dependencies
      id: outdated
      run: |
        pip list --outdated --format=json | tee outdated.json
        echo "outdated=$(jq -r 'length' outdated.json)" >> $GITHUB_OUTPUT
        
    - name: Create issue for outdated dependencies
      uses: peter-evans/create-issue-from-file@v5
      if: steps.outdated.outputs.outdated != '0'
      with:
        title: 'Dependency Updates Available'
        content-filepath: ./outdated.json
        assignees: ${{ github.actor }}
        labels: dependencies, automated

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install documentation dependencies
      run: |
        pip install -e .[docs]
    
    - name: Build documentation
      run: |
        cd docs && make html
    
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/

  notify:
    name: Notify Status
    # No explicit needs to avoid circular dependencies
    # Will run after all other jobs complete
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check if all jobs passed
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        if: always()
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL || 'dummy' }}
          SLACK_COLOR: ${{ job.status == 'success' && '#36a64f' || '#ff0000' }}
          SLACK_TITLE: 'Workflow ${{ job.status }}: ${{ github.workflow }} #${{ github.run_number }}'
          SLACK_MESSAGE: 'Commit: ${{ github.sha }} on ${{ github.ref_name }} by @${{ github.actor }}\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
      - name: Send failure notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL || 'dummy' }}
          SLACK_MESSAGE: 'Some checks failed for ${{ github.repository }}@${{ github.sha }}'
          SLACK_COLOR: 'danger'
