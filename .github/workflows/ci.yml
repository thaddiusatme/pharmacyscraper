name: CI Pipeline

on:
  push:
    # Run on all branches when pushing to src/, tests/, or .github/workflows/
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/**'
    # Run on pushes to main and feature branches
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches: [main, 'feature/**']
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for running workflow'
        required: false
        default: 'Manual trigger'
        type: string

env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.5.1'

# Set default permissions for the workflow
permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  statuses: write
  pull-requests: write

jobs:
  test:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10']
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry config virtualenvs.create true
        poetry install --with dev --no-interaction --no-ansi
    - name: Create test results directory
      run: mkdir -p test-results/${{ matrix.python-version }}
    - name: Run tests with coverage
      run: |
        set -x  # Enable debug output
        # Show Python version and environment info
        python --version
        pip list
        
        # Create test results directory if it doesn't exist
        mkdir -p test-results/${{ matrix.python-version }}
        
        # Run tests with coverage, capture output
        if ! poetry run pytest --cov=src --cov-report=xml --junitxml=test-results/${{ matrix.python-version }}/results.xml -v; then
          echo "Tests failed, showing test output:"
          cat test-results/${{ matrix.python-version }}/results.xml 2>/dev/null || echo "No test results file found"
          # Create a minimal test result file if none exists
          if [ ! -f "test-results/${{ matrix.python-version }}/results.xml" ]; then
            echo '<?xml version="1.0" ?><testsuites><testsuite name="pytest" tests="0" errors="0" failures="0" skipped="0"></testsuite></testsuites>' > test-results/${{ matrix.python-version }}/results.xml
          fi
          exit 1
        fi
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results/${{ matrix.python-version }}/
    - name: Upload coverage report
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.xml
        fail_ci_if_error: false
        verbose: true

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
    - name: Run Black
      run: black --check src tests || echo "Black check failed, continuing..."
    - name: Run Flake8
      run: flake8 src tests || echo "Flake8 check failed, continuing..."
    - name: Run Mypy
      run: mypy --install-types --non-interactive src || echo "Mypy check failed, continuing..."

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install Bandit
      run: pip install bandit
    - name: Run Bandit security scan
      continue-on-error: true
      run: |
        # Create output directory if it doesn't exist
        mkdir -p bandit-results
        # Run Bandit and save results in SARIF format
        pip install bandit bandit-sarif-formatter
        bandit -r src -f sarif -o bandit-results/bandit-results.sarif || echo "Bandit scan failed, continuing..."
        # Create empty file if no results
        touch bandit-results/bandit-results.sarif
    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bandit-results/bandit-results.sarif
      continue-on-error: true

  dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Check for outdated dependencies
      id: outdated
      run: |
        pip install pip-tools
        pip list --outdated --format=json > outdated.json
        echo "has_outdated=$(jq -r 'if length > 0 then "true" else "false" end' outdated.json)" >> $GITHUB_OUTPUT
    - name: Create issue for outdated dependencies
      uses: peter-evans/create-issue-from-file@v5
      if: steps.outdated.outputs.has_outdated == 'true'
      with:
        title: 'Dependency Updates Available'
        content-filepath: ./outdated.json
        assignees: ${{ github.actor }}
        labels: dependencies,automated

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y make build-essential python3-dev
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme recommonmark
        if [ -f "docs/requirements.txt" ]; then
          pip install -r docs/requirements.txt || echo "Could not install all documentation dependencies, continuing..."
        fi
    - name: Build documentation
      run: |
        set -x
        mkdir -p docs/_build/html
        # Create a minimal conf.py if it doesn't exist
        if [ ! -f "docs/conf.py" ]; then
          mkdir -p docs
          echo "# Minimal Sphinx configuration" > docs/conf.py
          echo "extensions = ['sphinx.ext.autodoc', 'sphinx.ext.viewcode']" >> docs/conf.py
          echo "source_suffix = '.rst'" >> docs/conf.py
          echo "master_doc = 'index'" >> docs/conf.py
          echo "project = 'Pharmacy Scraper'" >> docs/conf.py
          echo "copyright = '2025, Pharmacy Scraper Team'" >> docs/conf.py
          echo "version = '0.1'" >> docs/conf.py
          echo "release = '0.1.0'" >> docs/conf.py
          echo "exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']" >> docs/conf.py
          echo "html_theme = 'alabaster'" >> docs/conf.py
        fi
        # Create a minimal index.rst if it doesn't exist
        if [ ! -f "docs/index.rst" ]; then
          echo "Welcome to Pharmacy Scraper's documentation!" > docs/index.rst
          echo "==========================================" >> docs/index.rst
          echo "" >> docs/index.rst
          echo ".. toctree::" >> docs/index.rst
          echo "   :maxdepth: 2" >> docs/index.rst
          echo "   :caption: Contents:" >> docs/index.rst
          echo "" >> docs/index.rst
        fi
        # Build the docs
        cd docs
        if ! make html; then
          echo "Documentation build failed, showing error log:"
          cat _build/html/_sources/*.txt 2>/dev/null || echo "No documentation source files found"
          # Create a minimal index.html to ensure the artifact upload doesn't fail
          mkdir -p _build/html
          echo "<html><body><h1>Documentation build failed</h1><p>Check the build logs for details.</p></body></html>" > _build/html/index.html
          exit 1
        fi
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: documentation
        path: docs/_build/html/

  notify:
    name: Notify Status
    if: always()
    needs: [test, lint, security, dependencies, docs]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:
      - name: Check if all jobs passed
        if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
        run: exit 1
      
      # Only run Slack notifications if the secret is configured
      - name: Check for Slack webhook
        id: check-slack
        run: |
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            echo "slack_configured=true" >> $GITHUB_OUTPUT
          else
            echo "Slack webhook not configured, skipping notifications"
            echo "slack_configured=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Send Slack notification
        if: steps.check-slack.outputs.slack_configured == 'true'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: ${{ job.status == 'success' && '#36a64f' || '#ff0000' }}
          SLACK_TITLE: 'Workflow ${{ job.status }}: ${{ github.workflow }} #${{ github.run_number }}'
          SLACK_MESSAGE: |
            Commit: ${{ github.sha }} on ${{ github.ref_name }} by @${{ github.actor }}
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
