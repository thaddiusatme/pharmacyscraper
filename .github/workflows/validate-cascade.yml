name: Validate Cascade Rules

on:
  push:
    paths:
      - '.cascade/**'
      - '.windsurf/rules/**'
      - '.github/workflows/validate-cascade.yml'
  pull_request:
    paths:
      - '.cascade/**'
      - '.windsurf/rules/**'
      - '.github/workflows/validate-cascade.yml'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for running the workflow'
        required: false
        default: 'Manual trigger'

# Set environment variables for all jobs
env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.5.1'

# Default job configuration
jobs:
  validate:
    name: Validate Cascade Rules
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        persist-credentials: false
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
    
    - name: Set up validation script
      run: |
        echo "=== Setting up validation script ==="
        mkdir -p .github/scripts
        chmod +x .github/scripts/validate_cascade.py
        echo "Script permissions:"
        ls -la .github/scripts/validate_cascade.py
        echo "Python version:"
        python3 --version
        echo "Python path:"
        which python3
    
    - name: Validate YAML files
      run: |
        echo "=== Starting YAML validation ==="
        echo "Current directory: $(pwd)"
        echo "GitHub workspace: $GITHUB_WORKSPACE"
        
        # Create .cascade/rules directory if it doesn't exist
        echo "\n=== Setting up directories ==="
        mkdir -p .cascade/rules
        echo "Created .cascade/rules directory"
        
        # List all files for debugging
        echo "\n=== Directory structure ==="
        echo "Current directory contents:"
        ls -la
        echo "\n.cache directory contents:"
        ls -la .cache || echo "No .cache directory"
        echo "\n.cascade directory contents:"
        ls -la .cascade || echo "No .cascade directory"
        echo "\n.cascade/rules directory contents:"
        ls -la .cascade/rules || echo "No .cascade/rules directory"
        
        # Check for YAML files
        echo "\n=== Checking for YAML files ==="
        shopt -s nullglob
        yaml_files=(.cascade/rules/*.{yaml,yml})
        
        if [ ${#yaml_files[@]} -eq 0 ]; then
          echo "❌ No YAML files found in .cascade/rules/ directory"
          echo "Creating a sample pharmacy_scraper.yaml for testing..."
          cat > .cascade/rules/pharmacy_scraper.yaml << 'EOL'
# Pharmacy Scraper Cascade Rules
version: "1.0.0"
rules:
  - name: template-assistance
    description: Provide template-based assistance for common tasks
    triggers:
      - intent: create_issue
        patterns: 
          - "create (bug|issue|ticket)"
          - "report a problem"
          - "found an? (issue|bug)"
        priority: high
EOL
          echo "Created sample pharmacy_scraper.yaml"
          echo "New .cascade/rules directory contents:"
          ls -la .cascade/rules/
          yaml_files=(.cascade/rules/*.{yaml,yml})
        fi
        
        # Validate each YAML file
        echo "\n=== Validating YAML files ==="
        for file in "${yaml_files[@]}"; do
          if [ -f "$file" ]; then
            echo "\n=== Validating $file ==="
            python3 .github/scripts/validate_cascade.py "$file" || {
              echo "❌ Validation failed for $file"
              echo "File content:"
              cat "$file"
              exit 1
            }
            
            # Special verification for pharmacy_scraper.yaml
            if [ "$(basename "$file")" = "pharmacy_scraper.yaml" ]; then
              echo "\n=== Verifying pharmacy_scraper.yaml ==="
              python3 .github/scripts/validate_cascade.py "$file" --verify || {
                echo "❌ Verification failed for $file"
                exit 1
              }
            fi
          else
            echo "⚠️  File not found: $file"
          fi
        done
        
        echo "\n✓ YAML validation completed successfully"
