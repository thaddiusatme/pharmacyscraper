name: Validate Cascade Rules

on:
  push:
    paths:
      - '.cascade/**'
      - '.windsurf/rules/**'
      - '.github/workflows/validate-cascade.yml'
  pull_request:
    paths:
      - '.cascade/**'
      - '.windsurf/rules/**'
      - '.github/workflows/validate-cascade.yml'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for running the workflow'
        required: false
        default: 'Manual trigger'

# Set environment variables for all jobs
env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.5.1'

# Default job configuration
jobs:
  validate:
    name: Validate Cascade Rules
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        persist-credentials: false
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
    
    - name: Validate YAML syntax for Cascade rules
      id: validate-yaml
      continue-on-error: false
      run: |
        set -e
        echo "Validating YAML files..."
        
        # Function to validate YAML files
        validate_yaml() {
          local file_path="$1"
          echo "Checking $file_path..."
          
          if [ ! -f "$file_path" ]; then
            echo "::error::File not found: $file_path"
            return 1
          fi
          
          if ! python -c "import yaml, sys; yaml.safe_load(open('$file_path', 'r'))" 2>/dev/null; then
            echo "::error::Invalid YAML in $file_path"
            python -c "import yaml, sys; yaml.safe_load(open('$file_path', 'r'))" || true
            return 1
          fi
          
          echo "✓ $file_path is valid YAML"
          return 0
        }
        
        # Export the function so it's available in subshells
        export -f validate_yaml
        
        # Create required directories if they don't exist
        mkdir -p .cascade .windsurf/rules
        
        # Find and validate all YAML files in .cascade and .windsurf/rules
        find .cascade .windsurf/rules -name '*.y*ml' -type f -print0 | while IFS= read -r -d $'\0' file; do
          validate_yaml "$file"
        done
        
        echo "All YAML files validated successfully"
        
        if not valid:
            sys.exit(1)
        '
    
    - name: Check for required fields in Cascade rules
      run: |
        python -c '
        import yaml, os, sys
        
        def check_required_fields(rules, required_fields, file_path):
            missing = []
            for field in required_fields:
                if field not in rules:
                    missing.append(field)
            if missing:
                print(f"✗ {file_path} is missing required fields: {', '.join(missing)}")
                return False
            return True
        
        required_fields = ["rules", "version"]
        valid = True
        
        # Check .cascade/rules
        for root, _, files in os.walk(".cascade"):
            for file in files:
                if file.endswith(('.yaml', '.yml')):
                    file_path = os.path.join(root, file)
                    try:
                        with open(file_path, "r") as f:
                            rules = yaml.safe_load(f)
                            if not check_required_fields(rules, required_fields, file_path):
                                valid = False
                    except Exception as e:
                        print(f"Error checking {file_path}: {e}")
                        valid = False
        
        # Check .windsurf/rules
        for root, _, files in os.walk(".windsurf/rules"):
            for file in files:
                if file.endswith(('.yaml', '.yml', '.md')):
                    file_path = os.path.join(root, file)
                    try:
                        with open(file_path, "r") as f:
                            # Skip YAML front matter in markdown files
                            content = f.read()
                            if file.endswith('.md'):
                                if '---\n' in content:
                                    content = content.split('---\n', 2)[1]
                            rules = yaml.safe_load(content)
                            if not check_required_fields(rules, required_fields, file_path):
                                valid = False
                    except Exception as e:
                        print(f"Error checking {file_path}: {e}")
                        valid = False
        
        if not valid:
            sys.exit(1)
        else:
            print("✓ All rule files have the required fields")
        '
    
    - name: Check for YAML files
      id: check-files
      run: |
        echo "Checking for YAML files..."
        if [ -z "$(find .cascade .windsurf/rules -name '*.y*ml' -type f -print -quit)" ]; then
          echo "No YAML files found to validate"
          echo "has_files=false" >> $GITHUB_OUTPUT
        else
          echo "Found YAML files to validate"
          echo "has_files=true" >> $GITHUB_OUTPUT
        fi
    
    - name: Show validation summary
      if: always()
      run: |
        echo "YAML validation completed"
